---
- name: Wait for Postgres container to become ready
  ansible.builtin.command:
    cmd: docker compose -f docker-compose.prod.yml exec -T postgres pg_isready -U {{ postgres_user_name }} -d postgres
    chdir: "{{ app_root }}"
  register: postgres_ready_check
  retries: 12
  delay: 5
  until: postgres_ready_check.rc == 0
  changed_when: false

- name: Inspect target database presence
  ansible.builtin.command:
    cmd: docker compose -f docker-compose.prod.yml exec -T postgres psql -U {{ postgres_user_name }} -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='{{ postgres_db_name }}';"
    chdir: "{{ app_root }}"
  register: postgres_db_check
  changed_when: false

- name: Remember target database state
  ansible.builtin.set_fact:
    postgres_db_exists: "{{ (postgres_db_check.stdout | default('') | trim) == '1' }}"
    postgres_apply_schema: "{{ (not (postgres_volume_exists | default(false) | bool)) or (not ((postgres_db_check.stdout | default('') | trim) == '1')) or (force_recreate_db_flag | bool) }}"

- name: Create target database when missing
  ansible.builtin.shell: >-
    docker compose -f docker-compose.prod.yml exec -T postgres
    psql -U {{ postgres_user_name }} -d postgres
    -c "CREATE DATABASE \"{{ postgres_db_name }}\";"
  args:
    chdir: "{{ app_root }}"
  when: not (postgres_db_exists | bool)

- name: Mark database as created
  ansible.builtin.set_fact:
    postgres_db_exists: true
  when: not (postgres_db_exists | bool)

- name: Apply database schema when required
  ansible.builtin.shell: >-
    docker compose -f docker-compose.prod.yml exec -T postgres
    psql -U {{ postgres_user_name }} -d {{ postgres_db_name }}
    -f /docker-entrypoint-initdb.d/create_tables.sql
  args:
    chdir: "{{ app_root }}"
  when: postgres_apply_schema | bool
