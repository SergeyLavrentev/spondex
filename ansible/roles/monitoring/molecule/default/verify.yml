---
- name: Verify
  hosts: all
  become: true
  vars:
    app_root: /opt/spondex
    monitor_mail_enabled: false
    monitor_systemd_enabled: false
  tasks:
    - name: Read current monitoring config
      ansible.builtin.slurp:
        src: "{{ app_root }}/monitoring/config.yaml"
      register: monitor_config_initial

    - name: Assert current config looks templated
      ansible.builtin.assert:
        that:
          - "'Spondex monitoring configuration' in (monitor_config_initial.content | b64decode)"
        fail_msg: "Initial config does not look like templated output"

    - name: Simulate manual override of config
      ansible.builtin.copy:
        dest: "{{ app_root }}/monitoring/config.yaml"
        mode: "0640"
        content: |
          # manual override
          manual_override: true

    - name: Re-run role without overwrite flag (should preserve manual config)
      ansible.builtin.include_role:
        name: monitoring
      vars:
        monitor_systemd_enabled: false

    - name: Capture config after preservation run
      ansible.builtin.slurp:
        src: "{{ app_root }}/monitoring/config.yaml"
      register: monitor_config_preserved

    - name: Assert manual override is preserved
      ansible.builtin.assert:
        that:
          - "'# manual override' in (monitor_config_preserved.content | b64decode)"
          - "'manual_override: true' in (monitor_config_preserved.content | b64decode)"
        fail_msg: "Manual overrides were not preserved when overwrite flag disabled"

    - name: Re-run role with overwrite flag to restore template
      ansible.builtin.include_role:
        name: monitoring
      vars:
        monitor_overwrite_config: true
        monitor_systemd_enabled: false

    - name: Capture config after overwrite run
      ansible.builtin.slurp:
        src: "{{ app_root }}/monitoring/config.yaml"
      register: monitor_config_overwritten

    - name: Assert overwrite restored templated config
      ansible.builtin.assert:
        that:
          - "'Spondex monitoring configuration' in (monitor_config_overwritten.content | b64decode)"
          - "'manual_override' not in (monitor_config_overwritten.content | b64decode)"
        fail_msg: "Overwrite flag did not restore templated configuration"

    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: apt

    - name: Assert Exim4 package is installed
      ansible.builtin.assert:
        that:
          - "'exim4' in ansible_facts.packages"
        fail_msg: "Exim4 package is not installed"
      when: monitor_mail_enabled | bool

    - name: Read exim4 configuration
      ansible.builtin.slurp:
        src: /etc/exim4/update-exim4.conf.conf
      register: exim_config_content
      when: monitor_mail_enabled | bool

    - name: Assert exim4 is configured for internet site
      ansible.builtin.assert:
        that:
          - >
              (exim_config_content.content | b64decode) is search("dc_eximconfig_configtype='internet'")
        fail_msg: "Exim4 configuration type is not set to 'internet'"
      when: monitor_mail_enabled | bool

    - name: Check mailname configuration
      ansible.builtin.slurp:
        src: /etc/mailname
      register: mailname_content
      when: monitor_mail_enabled | bool

    - name: Assert mailname matches inventory hostname
      ansible.builtin.assert:
        that:
          - "(mailname_content.content | b64decode | trim) == inventory_hostname"
        fail_msg: "Mailname does not match expected hostname"
      when: monitor_mail_enabled | bool

    - name: Verify exim4 service is active
      ansible.builtin.command:
        cmd: systemctl is-active exim4
      register: exim_service_status
      changed_when: false
      when: monitor_mail_enabled | bool

    - name: Assert exim4 service is running
      ansible.builtin.assert:
        that:
          - exim_service_status.stdout.strip() == 'active'
        fail_msg: "exim4 service is not active"
      when: monitor_mail_enabled | bool

    - name: Send local test email through exim4
      ansible.builtin.shell: |
        set -euo pipefail
        printf 'Subject: Molecule test\nTo: root\n\nHello from Molecule!\n' | sendmail -i root
      args:
        executable: /bin/bash
      when: monitor_mail_enabled | bool

    - name: Verify exim4 queue is empty after sending mail
      ansible.builtin.command:
        cmd: exim4 -bp
      register: exim_queue
      changed_when: false
      when: monitor_mail_enabled | bool

    - name: Assert exim4 queue output command succeeded
      ansible.builtin.assert:
        that:
          - exim_queue.rc == 0
        fail_msg: "Failed to inspect exim4 mail queue"
      when: monitor_mail_enabled | bool
