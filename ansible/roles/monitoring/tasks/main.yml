---
- name: Ensure monitoring dependencies are installed
  ansible.builtin.apt:
    name: "{{ monitor_required_packages }}"
    state: present
    update_cache: true

- name: Ensure mail notification packages are installed
  ansible.builtin.apt:
    name: "{{ monitor_mail_packages }}"
    state: present
    update_cache: true
  when: monitor_mail_enabled | bool

- name: Ensure mailname is configured for MTA
  ansible.builtin.copy:
    dest: /etc/mailname
    content: "{{ monitor_mta_mailname | trim }}\n"
    mode: "0644"
  when: monitor_mail_enabled | bool
  notify: Regenerate exim4 configuration

- name: Render exim4 update configuration
  ansible.builtin.template:
    src: update-exim4.conf.conf.j2
    dest: /etc/exim4/update-exim4.conf.conf
    mode: "0644"
  when: monitor_mail_enabled | bool
  notify: Regenerate exim4 configuration

- name: Ensure exim4 service is enabled and running
  ansible.builtin.systemd:
    name: exim4
    enabled: true
    state: started
  when: monitor_mail_enabled | bool and (monitor_systemd_enabled | default(true)) | bool

- name: Ensure uv install directory exists
  ansible.builtin.file:
    path: "{{ monitor_uv_install_dir }}"
    state: directory
    mode: "0755"

- name: Install uv CLI if missing
  ansible.builtin.shell: |
    curl -LsSf https://astral.sh/uv/install.sh | sh
  args:
    creates: "{{ monitor_uv_binary }}"
  environment:
    UV_INSTALL_DIR: "{{ monitor_uv_install_dir }}"
    UV_INSTALL_VERSION: "{{ monitor_uv_version }}"
    UV_VERSION: "{{ monitor_uv_version }}"

- name: Check installed uv version
  ansible.builtin.command:
    cmd: "{{ monitor_uv_binary }} --version"
  register: monitor_uv_check
  changed_when: false
  failed_when: false
  environment:
    PATH: "{{ monitor_uv_install_dir }}:{{ ansible_env.PATH }}"

- name: Ensure uv CLI is at required version
  ansible.builtin.command:
    cmd: "{{ monitor_uv_binary }} self update {{ monitor_uv_version }}"
  when: (monitor_uv_version | length > 0) and (monitor_uv_check.rc != 0 or monitor_uv_version not in monitor_uv_check.stdout)
  changed_when: false
  environment:
    PATH: "{{ monitor_uv_install_dir }}:{{ ansible_env.PATH }}"

- name: Ensure monitoring virtualenv parent directory exists
  ansible.builtin.file:
    path: "{{ monitor_virtualenv_dir | dirname }}"
    state: directory
    mode: "0755"

- name: Check presence of uv lock file
  ansible.builtin.stat:
    path: "{{ monitor_uv_requirements }}"
  register: monitor_uv_lock

- name: Ensure uv lock file is available
  ansible.builtin.assert:
    that: monitor_uv_lock.stat.exists
    fail_msg: "uv.lock is missing at {{ monitor_uv_requirements }}; sync the repository before deploying monitoring dependencies."

- name: Check requirements file before export
  ansible.builtin.stat:
    path: "{{ app_root }}/requirements-monitor.txt"
  register: monitor_req_stat_before

- name: Export runtime requirements with uv
  ansible.builtin.command:
    cmd: uv export --frozen --no-dev --output-file {{ app_root }}/requirements-monitor.txt
    chdir: "{{ app_root }}"
  environment:
    UV_LINK_MODE: copy
    PATH: "{{ monitor_uv_install_dir }}:{{ ansible_env.PATH }}"
  register: monitor_uv_export
  changed_when: monitor_uv_export.rc == 0

- name: Check requirements file after export
  ansible.builtin.stat:
    path: "{{ app_root }}/requirements-monitor.txt"
  register: monitor_req_stat_after

- name: Set export changed flag
  ansible.builtin.set_fact:
    monitor_export_changed: "{{ (monitor_req_stat_before.stat.exists | default(false)) and (monitor_req_stat_after.stat.exists | default(false)) and (monitor_req_stat_before.stat.checksum != monitor_req_stat_after.stat.checksum) }}"

- name: Check if virtualenv exists
  ansible.builtin.stat:
    path: "{{ monitor_virtualenv_dir }}/bin/python"
  register: monitor_venv_stat

- name: Provision monitoring virtualenv via uv
  ansible.builtin.command:
    cmd: uv venv --clear --python {{ monitor_python_version }} {{ monitor_virtualenv_dir }}
    chdir: "{{ app_root }}"
  environment:
    UV_LINK_MODE: copy
    PATH: "{{ monitor_uv_install_dir }}:{{ ansible_env.PATH }}"
  when: not monitor_venv_stat.stat.exists

- name: Sync monitoring dependencies with uv
  ansible.builtin.command:
    cmd: uv pip sync --python {{ monitor_virtualenv_dir }}/bin/python {{ app_root }}/requirements-monitor.txt
    chdir: "{{ app_root }}"
  environment:
    UV_LINK_MODE: copy
    PATH: "{{ monitor_uv_install_dir }}:{{ ansible_env.PATH }}"
  when: monitor_export_changed

- name: Remove exported requirements file
  ansible.builtin.file:
    path: "{{ app_root }}/requirements-monitor.txt"
    state: absent
  changed_when: false

- name: Ensure monitoring state directory exists
  ansible.builtin.file:
    path: "{{ monitor_state_path | dirname }}"
    state: directory
    mode: "0755"

- name: Ensure monitoring script is executable
  ansible.builtin.file:
    path: "{{ app_root }}/monitoring/monitor.py"
    mode: "0755"

- name: Render monitoring configuration
  ansible.builtin.template:
    src: "{{ playbook_dir }}/templates/spondex-monitor-config.yaml.j2"
    dest: "{{ app_root }}/monitoring/config.yaml"
    mode: "0640"
    force: "{{ monitor_overwrite_config | bool }}"
    backup: "{{ monitor_overwrite_config | bool }}"

- name: Install systemd service for monitoring
  ansible.builtin.template:
    src: "{{ playbook_dir }}/templates/spondex-monitor.service.j2"
    dest: "/etc/systemd/system/spondex-monitor.service"
    mode: "0644"
  notify: Reload systemd daemon for monitoring units

- name: Install systemd timer for monitoring
  ansible.builtin.template:
    src: "{{ playbook_dir }}/templates/spondex-monitor.timer.j2"
    dest: "/etc/systemd/system/spondex-monitor.timer"
    mode: "0644"
  notify: Reload systemd daemon for monitoring units

- name: Ensure monitoring timer is enabled
  ansible.builtin.systemd:
    name: spondex-monitor.timer
    enabled: true
    state: started
  when: (monitor_systemd_enabled | default(true)) | bool
