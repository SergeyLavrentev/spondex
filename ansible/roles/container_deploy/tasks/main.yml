---
- name: Check Postgres data volume presence
  ansible.builtin.command:
    cmd: docker volume inspect {{ postgres_volume_name }}
  register: postgres_volume_inspect
  failed_when: false
  changed_when: false

- name: Remember Postgres data volume state
  ansible.builtin.set_fact:
    postgres_volume_exists: "{{ postgres_volume_inspect.rc == 0 }}"

- name: Stop compose stack before force database recreation
  ansible.builtin.command:
    cmd: docker compose -f docker-compose.prod.yml down --remove-orphans
    chdir: "{{ app_root }}"
  when: force_recreate_db_flag | bool

- name: Remove Postgres data volume when forcing recreation
  ansible.builtin.command:
    cmd: docker volume rm -f {{ postgres_volume_name }}
  register: postgres_volume_remove
  failed_when: false
  when: force_recreate_db_flag | bool

- name: Reset Postgres volume state after forced removal
  ansible.builtin.set_fact:
    postgres_volume_exists: false
  when: force_recreate_db_flag | bool

- name: Build deployment image locally when not in CI
  ansible.builtin.command:
    cmd: docker buildx build --platform linux/amd64 -t {{ deploy_image }} --load .
    chdir: "{{ repo_root }}"
  delegate_to: localhost
  become: false
  when: not is_ci_environment

- name: Create temporary archive for deployment image
  ansible.builtin.tempfile:
    state: file
    suffix: ".tar"
  register: local_image_archive
  delegate_to: localhost
  become: false
  when: not is_ci_environment

- name: Save deployment image to archive
  ansible.builtin.command:
    cmd: docker save -o {{ local_image_archive.path }} {{ deploy_image }}
  delegate_to: localhost
  become: false
  when: not is_ci_environment

- name: Upload deployment image archive to target host
  ansible.builtin.copy:
    src: "{{ local_image_archive.path }}"
    dest: "{{ remote_image_archive }}"
    mode: '0600'
  when: not is_ci_environment

- name: Load deployment image on target host
  ansible.builtin.command:
    cmd: docker load -i {{ remote_image_archive }}
  when: not is_ci_environment

- name: Remove deployment image archive from target host
  ansible.builtin.file:
    path: "{{ remote_image_archive }}"
    state: absent
  when: not is_ci_environment

- name: Cleanup local deployment image archive
  ansible.builtin.file:
    path: "{{ local_image_archive.path }}"
    state: absent
  delegate_to: localhost
  become: false
  when: not is_ci_environment and local_image_archive is defined

- name: Log in to GHCR registry when credentials are available
  when:
    - is_ci_environment
    - (ghcr_username | default('')) | length > 0
    - (ghcr_pat | default('')) | length > 0
  community.docker.docker_login:
    registry_url: ghcr.io
    username: "{{ ghcr_username }}"
    password: "{{ ghcr_pat }}"

- name: Pull latest images and build project
  ansible.builtin.command:
    cmd: docker compose -f docker-compose.prod.yml pull
    chdir: "{{ app_root }}"
  when: is_ci_environment

- name: Apply docker compose stack
  ansible.builtin.command:
    cmd: docker compose -f docker-compose.prod.yml up -d --remove-orphans
    chdir: "{{ app_root }}"
