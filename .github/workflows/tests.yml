name: Tests

on:
  push:
  pull_request:

jobs:
  pytest:
    runs-on: ubuntu-latest
    env:
      ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}/ansible/collections:~/.ansible/collections:/usr/share/ansible/collections
      ANSIBLE_CONFIG: ansible/ansible.cfg

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        env:
          UV_EXTRA: dev
        run: uv sync --frozen --extra dev

      - name: Install Ansible tooling
        run: |
          uv tool install ansible
          uv tool install ansible-lint

      - name: Install Ansible collections
        run: ansible-galaxy collection install --force -r ansible/requirements.yml -p ansible/collections

      - name: Verify Ansible collections
        run: |
          ls -R ansible/collections || true
          ansible-galaxy collection list --collections-path ansible/collections

      - name: Run Ansible lint
        run: ansible-lint -c ansible/ansible-lint.yml ansible/deploy.yml

      - name: Run Ansible syntax check
        run: ansible-playbook ansible/deploy.yml --syntax-check

      - name: Run tests
        run: uv run --extra dev python -m pytest --maxfail=1 --disable-warnings -q

  infra-smoke:
    name: Infrastructure smoke tests
    runs-on: ubuntu-latest
    needs: pytest
    env:
      DEPLOY_APP_TOKENS: ${{ secrets.APP_TOKENS || '' }}
      DEPLOY_SPOTIFY_CACHE: ${{ secrets.SPOTIFY_CACHE_CONTENT || '' }}
    steps:
      - name: Check infrastructure secrets availability
        id: check_secrets
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          missing=""
          for name in SSH_HOST SSH_USER SSH_PRIVATE_KEY; do
            value="${!name:-}"
            if [ -z "$value" ]; then
              missing="${missing}${name} "
            fi
          done
          if [ -n "$missing" ]; then
            echo "Required secrets are missing: $missing" | tee -a "$GITHUB_STEP_SUMMARY"
            echo "proceed=false" >> "$GITHUB_OUTPUT"
          else
            echo "All required secrets are present" | tee -a "$GITHUB_STEP_SUMMARY"
            echo "proceed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout repository
        if: ${{ steps.check_secrets.outputs.proceed == 'true' }}
        uses: actions/checkout@v4

      - name: Set up Python
        if: ${{ steps.check_secrets.outputs.proceed == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        if: ${{ steps.check_secrets.outputs.proceed == 'true' }}
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        if: ${{ steps.check_secrets.outputs.proceed == 'true' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Ansible tooling
        if: ${{ steps.check_secrets.outputs.proceed == 'true' }}
        run: uv tool install ansible

      - name: Install Ansible collections
        if: ${{ steps.check_secrets.outputs.proceed == 'true' }}
        run: ansible-galaxy collection install -r ansible/requirements.yml

      - name: Configure SSH access
        if: ${{ steps.check_secrets.outputs.proceed == 'true' }}
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -euxo pipefail
          install -m 0700 -d ~/.ssh
          printf '%s' "$SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p 49384 "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Create dynamic inventory
        if: ${{ steps.check_secrets.outputs.proceed == 'true' }}
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -euo pipefail
          printf '[prod]\n%s ansible_port=49384\n' "$SSH_HOST" > /tmp/inventory.ini

      - name: Prepare Ansible extra vars
        if: ${{ steps.check_secrets.outputs.proceed == 'true' }}
        run: |
          set -euxo pipefail
          python -c "import json, os, pathlib; pathlib.Path('/tmp/extra_vars.json').write_text(json.dumps({
            'app_tokens_content': os.environ.get('DEPLOY_APP_TOKENS', ''),
            'extra_ufw_ports': os.environ.get('DEPLOY_EXTRA_UFW_PORTS', ''),
            'app_port': os.environ.get('DEPLOY_APP_PORT', ''),
            'spotify_cache_content': os.environ.get('DEPLOY_SPOTIFY_CACHE', ''),
            'ghcr_username': os.environ.get('DEPLOY_GHCR_USERNAME', '') or os.environ.get('GITHUB_REPOSITORY_OWNER', ''),
            'ghcr_pat': os.environ.get('DEPLOY_GHCR_PAT', ''),
          }))"

      - name: Test SSH connectivity to production host
        if: ${{ steps.check_secrets.outputs.proceed == 'true' }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -euxo pipefail
          ssh -i ~/.ssh/deploy_key \
            -p 49384 \
            -o BatchMode=yes \
            -o StrictHostKeyChecking=yes \
            "$SSH_USER@$SSH_HOST" \
            'echo SSH connection successful'

      - name: Ansible deploy syntax check
        if: ${{ steps.check_secrets.outputs.proceed == 'true' }}
        run: ansible-playbook ansible/deploy.yml --syntax-check

      - name: Run Ansible deploy smoke tasks
        if: ${{ steps.check_secrets.outputs.proceed == 'true' }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          set -euxo pipefail
          export ANSIBLE_HOST_KEY_CHECKING=true
          ansible-playbook ansible/deploy.yml \
            -i /tmp/inventory.ini \
            --limit prod \
            -u "$SSH_USER" \
            --private-key ~/.ssh/deploy_key \
            --extra-vars '@/tmp/extra_vars.json' \
            --tags smoke

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: infra-smoke
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      DEPLOY_APP_TOKENS: ${{ secrets['APP_TOKENS'] }}
      DEPLOY_SPOTIFY_CACHE: ${{ secrets['SPOTIFY_CACHE_CONTENT'] }}
      DEPLOY_GHCR_PAT: ${{ secrets['GHCR_PAT'] }}
      DEPLOY_GHCR_USERNAME: ${{ vars.GHCR_IMAGE_OWNER || github.repository_owner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Ansible tooling
        run: uv tool install ansible

      - name: Install Ansible collections
        run: ansible-galaxy collection install -r ansible/requirements.yml

      - name: Configure SSH
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -euxo pipefail
          install -m 0700 -d ~/.ssh
          printf '%s' "$SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p 49384 "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Create dynamic inventory
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -euo pipefail
          if [ -z "$SSH_HOST" ]; then
            echo "SSH_HOST secret is required" >&2
            exit 1
          fi
          printf '[prod]\n%s ansible_port=49384\n' "$SSH_HOST" > /tmp/inventory.ini

      - name: Prepare Ansible extra vars
        run: |
          set -euxo pipefail
          python -c "import json, os, pathlib; pathlib.Path('/tmp/extra_vars.json').write_text(json.dumps({
            'app_tokens_content': os.environ.get('DEPLOY_APP_TOKENS', ''),
            'extra_ufw_ports': os.environ.get('DEPLOY_EXTRA_UFW_PORTS', ''),
            'app_port': os.environ.get('DEPLOY_APP_PORT', ''),
            'spotify_cache_content': os.environ.get('DEPLOY_SPOTIFY_CACHE', ''),
            'ghcr_username': os.environ.get('DEPLOY_GHCR_USERNAME', ''),
            'ghcr_pat': os.environ.get('DEPLOY_GHCR_PAT', ''),
          }))"

      - name: Run Ansible playbook
        run: |
          set -euxo pipefail
          export ANSIBLE_HOST_KEY_CHECKING=true
          ansible-playbook ansible/deploy.yml \
            -i /tmp/inventory.ini \
            --limit prod \
            -u "${{ secrets.SSH_USER }}" \
            --private-key ~/.ssh/deploy_key \
            --extra-vars '@/tmp/extra_vars.json'
